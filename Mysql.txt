CREATE DATABASE IF NOT EXISTS college; //creating database if it is not exist
USE college; //using database

//creating table
CREATE TABLE STUDENT(
   ID INT PRIMARY KEY,
   NAME VARCHAR(50)
);

//inserting data into table
INSERT INTO STUDENT
(ID,NAME)
VALUES
(1,"DHRUV"),
(2,"PAYAS");


//printing data
SELECT * FROM STUDENT;

CREATE DATABASE IF NOT EXISTS XYZ;
USE XYZ;

CREATE TABLE STUDENT(
   ID INT PRIMARY KEY,
   NAME VARCHAR(50)

);

CREATE TABLE EMPLOYEE(
   ID INT,
   NAME VARCHAR(50),
   SALARY INT DEFAULT 2000000, //Default is use to set default value
   NUMB INT unique,
   CITY VARCHAR(30),
   PRIMARY KEY (ID,NAME) //ID AND NAME PARE MAY NOT BE SAME
);

INSERT INTO EMPLOYEE
(ID,NAME,SALARY,NUMB,CITY)
value
(1,"TUSHAR",2500000,598345034,"INDORE"),
(2,"CHAYAN",3000000,598345433,"INDORE"),
(3,"DHRUV",28000000,598342421,"PUNE"),
(4,"TANISH",2300000,598379804,"VADODRA");

SELECT ID,NAME FROM EMPLOYEE; //get id and name column from employee
SELECT DISTINCT CITY FROM EMPLOYEE; //Distinct is use to select unique city
SELECT * FROM EMPLOYEE WHERE CITY = "INDORE"; //where keyword is use to give condition
SELECT * FROM EMPLOYEE WHERE ID BETWEEN 2 AND 3; // Between is use to give condition between
SELECT * FROM EMPLOYEE WHERE CITY IN ("INDORE"); // city which is indore
SELECT * FROM EMPLOYEE WHERE CITY NOT IN ("INDORE"); // city which is not indore
SELECT * FROM EMPLOYEE LIMIT 3; //setting limit of select
SELECT * FROM EMPLOYEE WHERE CITY="INDORE" LIMIT 3; //three rows with city indore
SELECT * FROM EMPLOYEE ORDER BY CITY DESC; //ordering city in decending order
SELECT MAX(SALARY) FROM EMPLOYEE; // get maximum salary
SELECT AVG(SALARY),CITY FROM EMPLOYEE GROUP BY CITY order by avg(SALARY) DESC; //avg salary on the basis of city
SELECT COUNT(NAME) FROM EMPLOYEE; // give number of names
SELECT COUNT(NAME),avg(SALARY) FROM EMPLOYEE GROUP BY CITY;

CREATE TABLE FOREGK(
   CUST_ID INT,
   FOREIGN KEY (CUST_ID) references STUDENT(ID), // using foreign key
   AGE INT CHECK( AGE >= 19 )
);

CREATE TABLE CITY(
	AGE INT NOT NULL,
    CONSTRAINT AGE_CHECK CHECK (AGE >= 21 AND CITY = "DELHI")
);

INSERT INTO EMPLOYEE
(ID,NAME,SALARY)
VALUE
(1,"ADAM",25000),
(2,"BOB",30000),
(3,"CASEY",40000);

SELECT * FROM EMPLOYEE;

---------------------------------------------------------------------------------------------------------

CREATE DATABASE BUSINESS;
USE BUSINESS;
CREATE TABLE CUSTOMER(
   COUSTOMER_ID INT PRIMARY KEY,
   NAME VARCHAR(50),
   MODE VARCHAR(50),
   CITY VARCHAR(50)
);

INSERT INTO CUSTOMER
(COUSTOMER_ID,NAME,MODE,CITY)
VALUE
(101,"DHRUV","NETBANKING","INDORE"),
(102,"CHAYAN","NETBANKING","PUNE"),
(103,"TUSHAR","CREDIT CART","PAKISTAN"),
(104,"TANISH","NETBANKING","SINGAPOR"),
(105,"PAYAS","CREDIT CART","DELHI"),
(106,"LALA","NETBANKING","INDORE"),
(107,"PRANJAL","CREDIT CART","PUNE"),
(108,"NIKHIL","CREDIT CART","VEDODRA");

SET SQL_SAFE_UPDATES = 0; // important for updating or deleting
UPDATE CUSTOMER
SET NAME = "NISHI"
WHERE  COUSTOMER_ID = 106; // updating row

select * FROM CUSTOMER;

DELETE FROM CUSTOMER
WHERE COUSTOMER_ID = 108; // deleting row

SELECT COUNT(COUSTOMER_ID),MODE FROM CUSTOMER group by MODE;
SELECT COUNT(NAME),CITY,MODE FROM CUSTOMER GROUP BY CITY,MODE HAVING CITY IN ("INDORE","PUNE");


---------------------------------------------------------------------------------------------------------

CREATE DATABASE COLLEGE;
USE COLLEGE;

CREATE TABLE SUBJ(
   ID INT unique,
   NAME VARCHAR(30) PRIMARY KEY
);

INSERT INTO SUBJ
(ID,NAME)
value
(101,"SCIENCE"),
(102,"MATHS"),
(103,"ENGLISH"),
(104,"HINDI");

SET SQL_SAFE_UPDATES =0;
UPDATE SUBJ
SET NAME ="SANSKRIT"
WHERE ID = 103;

ALTER TABLE SUBJ
CHANGE NAME SUBJ_NAME VARCHAR(30) NOT NULL;

DELETE FROM SUBJ
WHERE ID = 102;

CREATE TABLE TEACHER(
    TEC_ID INT UNIQUE,
    NAME VARCHAR(50),
    COURSE_NAME VARCHAR(20),
    FOREIGN KEY (COURSE_NAME) REFERENCES SUBJ(NAME)
    ON UPDATE CASCADE
    ON DELETE CASCADE
);

INSERT INTO TEACHER
(TEC_ID,NAME,COURSE_NAME)
VALUE
(201,"DHRUV","SCIENCE"),
(202,"AYUSH","MATHS"),
(203,"PAYAS","ENGLISH"),
(204,"HARSH","HINDI");


//Altering table

ALTER TABLE TEACHER
ADD COLUMN NUMB INT NOT NULL;

ALTER TABLE TEACHER
DROP COLUMN NUMB;

ALTER TABLE TEACHER
RENAME TO TEACHERS;

ALTER TABLE TEACHERS
CHANGE NAME TECH_NAME VARCHAR(50);

ALTER TABLE TEACHERS
MODIFY TECH_NAME VARCHAR(20) NOT NULL;

SELECT * FROM SUBJ;
SELECT * FROM TEACHERS;

DROP TABLE SUBJ;
DROP TABLE TEACHERS;
TRUNCATE TABLE TEACHERS;
DROP DATABASE COLLEGE;

---------------------------------------------------------------------------------------------------------
CREATE DATABASE COMPANY;
USE COMPANY;

CREATE TABLE EMP_NAME(
    EMP_ID INT UNIQUE NOT NULL,
    EMP_NAME VARCHAR(20) NOT NULL
);

INSERT INTO EMP_NAME
(EMP_ID,EMP_NAME)
VALUE
(101,"DHRUV"),
(102,"CHAYAN"),
(103,"TUSHAR"),
(104,"TANISH");

INSERT INTO EMP_NAME VALUE (105,"BURHAN");

ALTER TABLE EMP_NAME
CHANGE EMP_NAME EP_NAME VARCHAR(20);

CREATE TABLE EMP_SALARY(
    ID INT UNIQUE NOT NULL,
    SALARY INT DEFAULT 2000000
);

INSERT INTO EMP_SALARY
(ID,SALARY)
VALUE
(101,4000000),
(102,3400000),
(103,3800000),
(104,3200000);

INSERT INTO EMP_SALARY VALUE (106,3600000);

SELECT * FROM EMP_NAME;

#JOINING (INNER JOINING)
SELECT *
#HERE "AS" IS ALIAS OR ALTERNATE NAME
FROM EMP_NAME AS A
INNER JOIN EMP_SALARY AS B
ON A.EMP_ID = B.ID;

# LEFT JOINING (OUTER)
SELECT *
FROM EMP_NAME AS A
LEFT JOIN EMP_SALARY AS B
ON A.EMP_ID = B.ID;

# LEFT EXCLUSIVE JOINING (OUTER)
SELECT *
FROM EMP_NAME AS A
LEFT JOIN EMP_SALARY AS B
ON A.EMP_ID = B.ID
WHERE B.ID IS NULL;

# RIGHT JOINING (OUTER)
SELECT *
FROM EMP_NAME AS A
RIGHT JOIN EMP_SALARY AS B
ON A.EMP_ID = B.ID;

# RIGHT EXCLUSIVE JOINING (OUTER)
SELECT *
FROM EMP_NAME AS A
RIGHT JOIN EMP_SALARY AS B
ON A.EMP_ID = B.ID
WHERE A.EMP_ID IS NULL;

# FULL JOINING (OUTER)
SELECT *
FROM EMP_NAME AS A
LEFT JOIN EMP_SALARY AS B
ON A.EMP_ID = B.ID
UNION
SELECT * FROM
EMP_NAME AS A
RIGHT JOIN EMP_SALARY AS B
ON A.EMP_ID = B.ID;

#SELF JOIN GIVES DATA OF SAME TABLE

CREATE TABLE EMPLOYEES(
   EMPLOYEE_ID INT UNIQUE NOT NULL,
   EMPLOYEE_NAME VARCHAR(30),
   MANAGER_ID INT NOT NULL
 );

INSERT INTO EMPLOYEES
(EMPLOYEE_ID,EMPLOYEE_NAME,MANAGER_ID)
VALUE
(101,"PIYUSH",103),
(102,"RADHE",103),
(103,"PRIYA",104),
(104,"PAYAS",104);

SELECT B.EMPLOYEE_NAME, A.EMPLOYEE_NAME AS MANAGER_NAME
FROM EMPLOYEES AS A
JOIN EMPLOYEES AS B
ON A.EMPLOYEE_ID = B.MANAGER_ID;

---------------------------------------------------------------------------------------------------------
#UNION is used to combine result of two or more tables
CREATE DATABASE STUDENT;
USE STUDENT;

CREATE TABLE MARKS(
ID INT UNIQUE,
MARKS INT NOT null
);

INSERT INTO MARKS
(ID,MARKS)
VALUE
(101,78),
(102,88),
(103,80),
(104,92);

CREATE TABLE MARKS2(
  ID INT UNIQUE,
  MARK_2 INT NOT NULL
);

INSERT INTO MARKS2
(ID,MARK_2)
VALUE
(101,98),
(102,87),
(105,79),
(106,83);

SELECT * FROM MARKS
UNION
SELECT * FROM MARKS2;


---------------------------------------------------------------------------------------------------------
#SQL SUB QUARIES
#A SUB QUARIES , INNER QUARIES OR NESTED QUARIES IS A QUARIES WITHIN ANOTHER SQL QUERY
CREATE database MARKS;
USE MARKS;
 CREATE TABLE INFO(
   ROLLNO INT UNIQUE,
   NAME VARCHAR(20),
   MARKS INT NOT NULL,
   CITY VARCHAR(10)
 );

 INSERT INTO INFO
 (ROLLNO,NAME,MARKS,CITY)
 VALUE
(101,"AYUSH",78,"INDORE"),
(102,"DHRUV",88,"PUNE"),
(103,"PAYAS",80,"INDORE"),
(104,"HARSH",92,"AHAMDABAD");

SELECT NAME
FROM INFO
WHERE MARKS > (SELECT avg(MARKS) FROM INFO); # THIS IS A SUB QUARY

SELECT NAME
FROM INFO
WHERE ROLLNO IN (SELECT ROLLNO FROM INFO WHERE ROLLNO % 2 =0);

SELECT max(MARKS)
FROM INFO
WHERE CITY IN (SELECT CITY FROM INFO WHERE CITY = "INDORE");


DROP DATABASE MARKS;

---------------------------------------------------------------------------------------------------------


#SQL SUB QUARIES
#A SUB QUARIES , INNER QUARIES OR NESTED QUARIES IS A QUARIES WITHIN ANOTHER SQL QUERY
CREATE database MARKS;
USE MARKS;
 CREATE TABLE INFO(
   ROLLNO INT UNIQUE,
   NAME VARCHAR(20),
   MARKS INT NOT NULL,
   CITY VARCHAR(10)
 );

 INSERT INTO INFO
 (ROLLNO,NAME,MARKS,CITY)
 VALUE
(101,"AYUSH",78,"INDORE"),
(102,"DHRUV",88,"PUNE"),
(103,"PAYAS",80,"INDORE"),
(104,"HARSH",92,"AHAMDABAD");

SELECT NAME
FROM INFO
WHERE MARKS > (SELECT avg(MARKS) FROM INFO); # THIS IS A SUB QUARY

SELECT NAME
FROM INFO
WHERE ROLLNO IN (SELECT ROLLNO FROM INFO WHERE ROLLNO % 2 =0);

SELECT max(MARKS)
FROM INFO
WHERE CITY IN (SELECT CITY FROM INFO WHERE CITY = "INDORE");

# A VIEW IS A VIRTUAL TABLE BASED ON RESULT SET OF AN SQL STATMENT (IT ALWAYS SHOW UP TO DATE DATA) DATABASE UPDATE IT EVERY TIME A QUARY IS RUN
CREATE VIEW VIEW1 AS
SELECT ROLLNO, NAME FROM INFO;

SELECT * FROM  VIEW1;

SELECT * FROM  VIEW1
WHERE ROLLN0 > 102;

DROP DATABASE MARKS;